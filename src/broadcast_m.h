//
// Generated file, do not edit! Created by nedtool 5.4 from src/broadcast.msg.
//

#if defined(__clang__)
#  pragma clang diagnostic ignored "-Wreserved-id-macro"
#endif
#ifndef __BROADCAST_M_H
#define __BROADCAST_M_H

#include <omnetpp.h>

// nedtool version check
#define MSGC_VERSION 0x0504
#if (MSGC_VERSION!=OMNETPP_VERSION)
#    error Version mismatch! Probably this file was generated by an earlier version of nedtool: 'make clean' should help.
#endif



// cplusplus {{
	#include "config.h"
	#include "types.h"
	#include "Sign.h"
	#include "Value.h"
	#include "Aggregate.h"
// }}

/**
 * Class generated from <tt>src/broadcast.msg:19</tt> by nedtool.
 * <pre>
 * packet BroadcastMsg
 * {
 *     int hdr \@enum(HEADER);
 *     PROCESS_ID pid;
 *     SEQUENCE_NUM seq;
 *     VALUE val;
 *     Aggregate esign;
 *     Aggregate sign;
 *     int mode \@enum(MODE);
 *     int inst;
 *     int round;
 *   //MODE mode;
 * }
 * </pre>
 */
class BroadcastMsg : public ::omnetpp::cPacket
{
  protected:
    int hdr;
    PROCESS_ID pid;
    SEQUENCE_NUM seq;
    VALUE val;
    Aggregate esign;
    Aggregate sign;
    int mode;
    int inst;
    int round;

  private:
    void copy(const BroadcastMsg& other);

  protected:
    // protected and unimplemented operator==(), to prevent accidental usage
    bool operator==(const BroadcastMsg&);

  public:
    BroadcastMsg(const char *name=nullptr, short kind=0);
    BroadcastMsg(const BroadcastMsg& other);
    virtual ~BroadcastMsg();
    BroadcastMsg& operator=(const BroadcastMsg& other);
    virtual BroadcastMsg *dup() const override {return new BroadcastMsg(*this);}
    virtual void parsimPack(omnetpp::cCommBuffer *b) const override;
    virtual void parsimUnpack(omnetpp::cCommBuffer *b) override;

    // field getter/setter methods
    virtual int getHdr() const;
    virtual void setHdr(int hdr);
    virtual PROCESS_ID& getPid();
    virtual const PROCESS_ID& getPid() const {return const_cast<BroadcastMsg*>(this)->getPid();}
    virtual void setPid(const PROCESS_ID& pid);
    virtual SEQUENCE_NUM& getSeq();
    virtual const SEQUENCE_NUM& getSeq() const {return const_cast<BroadcastMsg*>(this)->getSeq();}
    virtual void setSeq(const SEQUENCE_NUM& seq);
    virtual VALUE& getVal();
    virtual const VALUE& getVal() const {return const_cast<BroadcastMsg*>(this)->getVal();}
    virtual void setVal(const VALUE& val);
    virtual Aggregate& getEsign();
    virtual const Aggregate& getEsign() const {return const_cast<BroadcastMsg*>(this)->getEsign();}
    virtual void setEsign(const Aggregate& esign);
    virtual Aggregate& getSign();
    virtual const Aggregate& getSign() const {return const_cast<BroadcastMsg*>(this)->getSign();}
    virtual void setSign(const Aggregate& sign);
    virtual int getMode() const;
    virtual void setMode(int mode);
    virtual int getInst() const;
    virtual void setInst(int inst);
    virtual int getRound() const;
    virtual void setRound(int round);
};

inline void doParsimPacking(omnetpp::cCommBuffer *b, const BroadcastMsg& obj) {obj.parsimPack(b);}
inline void doParsimUnpacking(omnetpp::cCommBuffer *b, BroadcastMsg& obj) {obj.parsimUnpack(b);}


#endif // ifndef __BROADCAST_M_H

